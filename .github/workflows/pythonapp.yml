name: Python application CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Fetch Git history
        run: git fetch --prune --unshallow
      
      - name: Set up Python 3.11.5
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.5
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Security Scan with Bandit
        run: |
          pip install bandit
          bandit -r .
      
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV
      
      - name: Test with pytest
        run: |
          pip install pytest
          pytest

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Build Docker Image
        run: docker build -t my-python-app .

      - name: Login to AWS ECR
        env:
          AWS_REGION: us-east-1
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_URL
      
      - name: Tag and Push Docker Image
        run: |
          docker tag my-python-app:latest ${{ secrets.AWS_ECR_URL }}/my-python-app:latest
          docker push ${{ secrets.AWS_ECR_URL }}/my-python-app:latest

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Deploy to AWS ECS
        run: |
          aws ecs update-service --cluster my-cluster --service my-service --force-new-deployment
  
      - name: Send Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "‚ùå Build failed for commit ${{ github.sha }}"
